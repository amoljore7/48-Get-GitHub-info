{"version":3,"sources":["asset/octocat.svg","components/banner/banner.style.jsx","components/banner/banner.component.jsx","components/search-box/search-box.style.jsx","components/search-box/search-box.component.jsx","components/card/card.style.jsx","components/card/card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HeadingStyle","styled","h1","LogoStyle","img","Banner","src","ReactLogo","alt","DivStyle","div","LabelStyle","label","InputStyle","input","SearchBox","onInputChange","autoComplete","onSubmit","e","preventDefault","htmlFor","id","type","placeholder","name","onChange","MainDiv","AvatarStyle","InfoStyle","Card","profile","avatar_url","href","html_url","target","rel","Email","location","public_repos","bio","App","props","event","setState","searchName","value","getData","state","userName","fetch","then","res","json","data","userData","catch","error","alert","console","log","this","className","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPAAe,G,MAAA,IAA0B,qC,cCE5BA,EAAeC,IAAOC,GAAV,wNAWZC,EAAYF,IAAOG,IAAV,4C,OCOPC,EAbA,WACb,OACE,cAAC,WAAD,UACE,iCACE,eAACL,EAAD,6BAEE,cAACG,EAAD,CAAWG,IAAKC,EAAWC,IAAI,wBCX5BC,EAAWR,IAAOS,IAAV,iJAQRC,EAAaV,IAAOW,MAAV,sDAIVC,EAAaZ,IAAOa,MAAV,6RCWRC,EAlBG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,cAAC,WAAD,UACE,sBACEC,aAAa,MACbC,SAAU,SAACC,GACTA,EAAEC,kBAHN,SAME,eAACX,EAAD,WACE,cAACE,EAAD,CAAYU,QAAQ,OAApB,yBACA,cAACR,EAAD,CAAYS,GAAG,OAAOC,KAAK,SAASC,YAAY,iBAAiBC,KAAK,OAAOC,SAAUV,YChBpFW,EAAU1B,IAAOS,IAAV,oJAQPkB,EAAc3B,IAAOG,IAAV,mEAKXyB,EAAY5B,IAAOS,IAAV,oJCuBPoB,EA/BF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,eAACJ,EAAD,WAEE,8BACE,cAACC,EAAD,CAAatB,IAAKyB,EAAQC,WAAYxB,IAAKuB,EAAQN,SAGrD,eAACI,EAAD,WAEE,yCAAYE,EAAQN,QAEpB,+CACe,IACb,mBAAGQ,KAAMF,EAAQG,SAAUC,OAAO,SAASC,IAAI,sBAA/C,SACGL,EAAQG,cAIb,0CAAaH,EAAQM,SAErB,4CAAeN,EAAQO,YAEvB,iDAAoBP,EAAQQ,gBAE5B,wCAAWR,EAAQS,cCiBZC,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAOR1B,cAAgB,SAAC2B,GACf,EAAKC,SAAS,CAAEC,WAAYF,EAAMR,OAAOW,QAAS,WAChD,EAAKC,QAAQ,EAAKC,MAAMH,gBAVT,EAcnBE,QAAU,SAACE,GACTC,MAAM,gCAAD,OAAiCD,IACnCE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKV,SAAS,CAAEW,SAAUD,OACzCE,OAAM,SAACC,GACNC,MAAM,gCACNC,QAAQC,IAAI,yBAA0BH,OAlB1C,EAAKT,MAAQ,CACXH,WAAY,GACZU,SAAU,IAJK,E,0CAwBnB,WACE,OACE,eAAC,WAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWvC,cAAe6C,KAAK7C,gBAC9B6C,KAAKb,MAAMO,SAASjC,IAAgC,KAA1BuC,KAAKb,MAAMH,WACpC,cAAC,EAAD,CAAMd,QAAS8B,KAAKb,MAAMO,WAE1B,sBAAKO,UAAU,UAAf,4BACiB,iC,GAlCTC,aCKEC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLE,QAAQF,MAAMA,EAAMqB,c","file":"static/js/main.3f101f62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/octocat.82c54c84.svg\";","import styled from \"styled-components\";\n\nexport const HeadingStyle = styled.h1`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  text-transform: uppercase;\n  font-size: 4rem;\n`;\n\nexport const LogoStyle = styled.img`\n  width: 5rem;\n`;\n","import React, { Fragment } from \"react\";\nimport ReactLogo from \"../../asset/octocat.svg\";\n\n// Styling\nimport { HeadingStyle } from \"./banner.style\";\nimport { LogoStyle } from \"./banner.style\";\n\nconst Banner = () => {\n  return (\n    <Fragment>\n      <header>\n        <HeadingStyle>\n          Get GitHub Info\n          <LogoStyle src={ReactLogo} alt=\"GitHub Logo\" />\n        </HeadingStyle>\n      </header>\n    </Fragment>\n  );\n};\n\nexport default Banner;\n","import styled from \"styled-components\";\n\nexport const DivStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 1rem;\n`;\n\nexport const LabelStyle = styled.label`\n  padding-bottom: 0.3em;\n`;\n\nexport const InputStyle = styled.input`\n  border-radius: 20px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.08), 0 2px 2px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.16), 0 8px 8px rgba(0, 0, 0, 0.2);\n  height: 40px;\n  width: 200px;\n  text-align: center;\n  &:focus {\n    outline: none;\n  }\n`;\n","import React, { Fragment } from \"react\";\n\n// Styling\nimport { DivStyle } from \"./search-box.style\";\nimport { LabelStyle } from \"./search-box.style\";\nimport { InputStyle } from \"./search-box.style\";\n\nconst SearchBox = ({ onInputChange }) => {\n  return (\n    <Fragment>\n      <form\n        autoComplete=\"off\"\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <DivStyle>\n          <LabelStyle htmlFor=\"user\">Search User</LabelStyle>\n          <InputStyle id=\"user\" type=\"search\" placeholder=\"Enter username\" name=\"user\" onChange={onInputChange} />\n        </DivStyle>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default SearchBox;\n","import styled from \"styled-components\";\n\nexport const MainDiv = styled.div`\n  padding-top: 10px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n`;\n\nexport const AvatarStyle = styled.img`\n  width: 10em;\n  padding-right: 1em;\n`;\n\nexport const InfoStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  font-size: 1em;\n`;\n","import React from \"react\";\n\n// import Style\nimport { MainDiv } from \"./card.style\";\nimport { InfoStyle } from \"./card.style\";\nimport { AvatarStyle } from \"./card.style\";\n\nconst Card = ({ profile }) => {\n  return (\n    <MainDiv>\n      {/* Avatar */}\n      <div>\n        <AvatarStyle src={profile.avatar_url} alt={profile.name} />\n      </div>\n      {/* Info */}\n      <InfoStyle>\n        {/* Name */}\n        <div>Name: {profile.name}</div>\n        {/* Github Link */}\n        <div>\n          GitHub Link:{\" \"}\n          <a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {profile.html_url}\n          </a>\n        </div>\n        {/* email */}\n        <div>Email: {profile.Email}</div>\n        {/* Location */}\n        <div>Location:{profile.location}</div>\n        {/* Public repo */}\n        <div>Public repos: {profile.public_repos}</div>\n        {/* Info */}\n        <div>Bio: {profile.bio}</div>\n      </InfoStyle>\n    </MainDiv>\n  );\n};\n\nexport default Card;\n","import React, { Fragment, Component } from \"react\";\n\nimport \"./App.css\";\nimport Banner from \"./components/banner/banner.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport Card from \"./components/card/card.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchName: \"\",\n      userData: \"\",\n    };\n  }\n\n  onInputChange = (event) => {\n    this.setState({ searchName: event.target.value }, () => {\n      this.getData(this.state.searchName);\n    });\n  };\n\n  getData = (userName) => {\n    fetch(`https://api.github.com/users/${userName}`)\n      .then((res) => res.json())\n      .then((data) => this.setState({ userData: data }))\n      .catch((error) => {\n        alert(\"Oops! Could not reach GitHub\");\n        console.log(\"Oops! We have an error\", error);\n      });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Banner />\n        <SearchBox onInputChange={this.onInputChange} />\n        {this.state.userData.id && this.state.searchName !== \"\" ? (\n          <Card profile={this.state.userData} />\n        ) : (\n          <div className=\"no-data\">\n            No user Found! <br />\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}